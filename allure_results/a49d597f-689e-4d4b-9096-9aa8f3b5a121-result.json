{"name": "test_buy_product", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "@allure.description(\"Test buy product\")\n    def test_buy_product():\n        options = webdriver.ChromeOptions()\n        options.add_experimental_option(\"detach\", True)\n        options.add_argument(\"--guest\")\n        options.add_argument(\"--disable-notifications\")\n        options.add_argument(\"--disable-infobars\")\n        options.add_argument(\"--disable-extensions\")\n    \n        prefs = {\n            \"profile.default_content_setting_values.notifications\": 2,\n            \"profile.managed_default_content_settings.notifications\": 2,\n            \"profile.default_content_setting_values.popups\": 0,\n            \"credentials_enable_service\": False,\n            \"profile.password_manager_enabled\": False\n        }\n        options.add_experimental_option(\"prefs\", prefs)\n        options.add_experimental_option(\"excludeSwitches\", [\"enable-automation\"])\n        options.add_experimental_option(\"useAutomationExtension\", False)\n        driver = webdriver.Chrome(options=options)\n    \n    \n        bc = Base(driver)\n        mp = Main_Page(driver)\n        mp.find_light_page()\n    \n        lp = Light_page(driver)\n        lp.light_page_choose_type_of_lamps()\n    \n        llp = Led_lamps_page(driver)\n>       llp.choose_lamp_for_buy()\n\ntests\\test_buy.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\led_lamps_page.py:250: in choose_lamp_for_buy\n    self.click_12W_checkbox()\npages\\led_lamps_page.py:160: in click_12W_checkbox\n    self.get_12W_power().click()\n    ^^^^^^^^^^^^^^^^^^^^\npages\\led_lamps_page.py:73: in get_12W_power\n    return WebDriverWait(self.driver, 15).until(EC.element_to_be_clickable((By.XPATH, self.POWER_12W_CHECKBOX)))\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"1be45d9d83e713c8d4ef2aac2ff65b37\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x000001A18936A840>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nC:\\Users\\Lesya\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "description": "Test buy product", "steps": [{"name": "find_light_page", "status": "passed", "start": 1752137039214, "stop": 1752137043264}, {"name": "light_page_choose_type_of_lamps", "status": "passed", "start": 1752137043264, "stop": 1752137044031}, {"name": "Choose lamp for buy", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \n\n", "trace": "  File \"C:\\Python projects\\PythonProject1\\Final_Smoke_Test\\pages\\led_lamps_page.py\", line 250, in choose_lamp_for_buy\n    self.click_12W_checkbox()\n  File \"C:\\Python projects\\PythonProject1\\Final_Smoke_Test\\pages\\led_lamps_page.py\", line 160, in click_12W_checkbox\n    self.get_12W_power().click()\n    ^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Python projects\\PythonProject1\\Final_Smoke_Test\\pages\\led_lamps_page.py\", line 73, in get_12W_power\n    return WebDriverWait(self.driver, 15).until(EC.element_to_be_clickable((By.XPATH, self.POWER_12W_CHECKBOX)))\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Lesya\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 105, in until\n    raise TimeoutException(message, screen, stacktrace)\n"}, "start": 1752137044031, "stop": 1752137064914}], "attachments": [{"name": "stdout", "source": "9387475e-78b4-4bea-a69e-094493f50932-attachment.txt", "type": "text/plain"}], "start": 1752137038041, "stop": 1752137064915, "uuid": "8f01293d-54dd-44be-920d-79bb76d5b02b", "historyId": "1d936e77a982bec862a2edbe677e6d01", "testCaseId": "1d936e77a982bec862a2edbe677e6d01", "fullName": "tests.test_buy#test_buy_product", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_buy"}, {"name": "host", "value": "DESKTOP-OIGT7BB"}, {"name": "thread", "value": "16500-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_buy"}]}